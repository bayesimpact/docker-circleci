#!/usr/bin/env python3
"""
 Specify which vars should be set on the demo run from the current build.
 Assumes that it is run in CircleCI context,
 in particular it has access to CircleCI environment variables:
 https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables.
"""

import argparse
import logging
import os
import re
import subprocess
from typing import Any, Iterator, Optional, Tuple
from urllib import parse

import requests

_VARIABLE_LINE_REGEX = re.compile(r'^\w+=')


def _run_git(*command: str, **kwargs: Any) -> str:
    return subprocess.check_output(['git'] + list(command), text=True, **kwargs).strip()


def _get_commit_variables() -> dict[str, str]:

    return {
        name: value
        for line in _run_git('log', '-n1', r'--format=%B').split('\n')
        if _VARIABLE_LINE_REGEX.match(line)
        for name, value in (line.split('=', 1),)}


def _get_callback_url(env: dict[str, str]) -> Optional[str]:
    workflow_id = env.get('CIRCLE_WORKFLOW_ID')
    if not workflow_id:
        logging.info('Missing a workflow ID, no callback_url available.')
        return
    circle_token = env.get('CIRCLE_API_TOKEN')
    if not circle_token:
        raise ValueError('Missing a CircleCI API token. Please set CIRCLE_API_TOKEN')
    workflow_api = f'https://circleci.com/api/v2/workflow/{workflow_id}'
    # https://circleci.com/docs/api/v2/#operation/listWorkflowJobs
    response = requests.get(f'{workflow_api}/job', headers={'Circle-Token': circle_token})
    approval_id = next((
        item['approval_request_id']
        for item in response.json().get('items', [])
        if item.get('type') == 'approval'
        if item.get('name') == 'wait-for-demo'), None)
    return f'{workflow_api}/approve/{approval_id}' if approval_id else None


def _get_variables(env: dict[str, str]) -> Iterator[Tuple[str, str]]:
    branch = env.get('CIRCLE_BRANCH')
    tag = env.get('CIRCLE_TAG')
    github_user = env.get('CIRCLE_PROJECT_USERNAME')
    github_repo = env.get('CIRCLE_PROJECT_REPONAME')
    if callback_url := _get_callback_url(env):
        yield 'ci_callback_url', callback_url
    if tag or branch == 'main':
        return
    yield 'repo', f'{github_user}/{github_repo}'
    yield 'branch', f'{github_user}:{branch}'
    commit_variables = _get_commit_variables()
    if path := commit_variables.pop('PATH', None):
        yield 'path', path
    if demo_env := commit_variables.pop('ENV', None):
        yield 'env', demo_env
    for key, value in commit_variables.items():
        yield 'override', f'{key}:{value}'


def main(string_args: Optional[list[str]] = None, env: Optional[dict[str, str]] = None) -> str:
    """Decide how the demo vars should be returned."""

    parser = argparse.ArgumentParser(description='Get all variables needed for the demos.')
    parser.add_argument('variable', nargs='?', help='Return only the specified variable.')
    args = parser.parse_args(string_args)
    all_variables = list(_get_variables(env or os.environ))
    if args.variable:
        by_key = dict(all_variables)
        return by_key[args.variable]
    return parse.urlencode(all_variables)


if __name__ == '__main__':
    print(main())
