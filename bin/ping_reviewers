#!/usr/bin/env python3
"""Ping reviewers for a given branch."""

import json
import logging
import os
import sys
from typing import Any, Optional, TypedDict

import requests

_SLACK_INTEGRATION_URL = os.getenv('SLACK_INTEGRATION_URL', '')
# TODO(cyrille): Ensure this exists, probably with a Circle context.
_GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

_REPO = f"{os.getenv('CIRCLE_PROJECT_USERNAME', '')}/{os.getenv('CIRCLE_PROJECT_REPONAME', '')}"
_PR_NUMBER = os.getenv('CIRCLE_PULL_REQUEST', '').rsplit('/', 1)[-1]

_SLACK_TO_GITHUB: dict[str, str] = json.loads(os.getenv('SLACK_GITHUB_USER_PAIRINGS', r'{}'))


class _GithubUser(TypedDict):
    """A user object."""

    login: str


class _GithubRepo(TypedDict):
    """A repository object."""

    default_branch: str
    full_name: str
    owner: _GithubUser


class _GithubPullRequestBase(TypedDict, total=False):
    """The base commit of a Pull Request."""

    repo: _GithubRepo


class _GithubCommit(TypedDict):
    """A commit objet."""

    message: str
    ref: str
    sha: str


class _GithubPullRequest(TypedDict, total=False):
    """A pull-request object."""

    base: _GithubPullRequestBase
    number: int
    requested_reviewers: list[_GithubUser]
    title: str


class _Request(TypedDict, total=False):
    text: str
    channel: str
    attachments: list[dict[str, Any]]


def _get_user(github_user: str, as_channel: bool = False) -> str:
    try:
        user_id = _SLACK_TO_GITHUB[github_user]
        if as_channel:
            return f'@{user_id}'
        return f'<@{user_id}>'
    except KeyError:
        return f'@{_SLACK_TO_GITHUB.get(github_user, github_user)}'


# TODO(cyrille): Consider using a repo-specific channel.
def _post_to_slack(prepared_request: _Request) -> None:
    response = requests.post(_SLACK_INTEGRATION_URL, json=prepared_request)
    response.raise_for_status()


def _send_review(
        title: str, demo_url: Optional[str], *,
        github_reviewer: Optional[str] = None, reviewers: Optional[str] = None) -> None:
    request: _Request = {
        'text': f'A <{demo_url}|demo> is ready' if demo_url else 'CI tests passed'
        f'for the PR <https://reviewable.io/reviews/{_REPO}/{_PR_NUMBER}|#{_PR_NUMBER}>.',
        'attachments': [{'text': title}],
    }
    if github_reviewer:
        request['channel'] = _get_user(github_reviewer, as_channel=True)
        request['text'] += ' You can start looking at it.'
    elif reviewers:
        request['text'] += f' Reviewers ({reviewers}) can start looking at it.'
    _post_to_slack(request)


def ping_reviewers(string_args: Optional[list[str]] = None) -> None:
    """Send slack pings to the relevant people, if requirements are met."""

    string_args = string_args or sys.argv[1:]
    demo_url = string_args[0] if string_args else None
    if not _SLACK_INTEGRATION_URL:
        print('Slack integration URL is missing, please set SLACK_INTEGRATION_URL')
        return
    if not _GITHUB_TOKEN:
        print('Need a Github token to push, please set GITHUB_TOKEN')
        return
    if _REPO.strip('/') != _REPO:
        print(
            'No Github repo specified, '
            'please set CIRCLE_PROJECT_USERNAME and CIRCLE_PROJECT_REPONAME')
        return
    # TODO(cyrille): Consider fetching the available PRs from Github if _PR_NUMBER is empty.
    if not _PR_NUMBER:
        print('No PR to review, please set CIRCLE_PULL_REQUEST with a Github PR url')
        return
    response = requests.get(
        f'https://api.github.com/repos/{_REPO}/pulls/{_PR_NUMBER}',
        headers={
            'Accept': 'application/vnd.github.v3+json',
            'Authorization': f'token {_GITHUB_TOKEN}',
        })
    response.raise_for_status()
    pull_request: _GithubPullRequest = response.json()
    all_reviewers = list(filter(None, {
        reviewer.get('login', '') for reviewer in pull_request.get('requested_reviewers', [])}))
    if not all_reviewers:
        return
    logging.info('Pinging reviewers (of #%d) on Slack to tell them the Demo is readyâ€¦', _PR_NUMBER)
    title = pull_request['title']
    try:
        for reviewer in all_reviewers:
            _send_review(title, demo_url, github_reviewer=reviewer)
    except requests.HTTPError:
        # Unable to send the review to one of the reviewers, sending it to default channel.
        named_reviewers = ', '.join(_get_user(r) for r in sorted(all_reviewers))
        _send_review(title, demo_url, reviewers=named_reviewers)


if __name__ == '__main__':
    ping_reviewers()
